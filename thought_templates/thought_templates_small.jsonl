{"thought_name": "Merge Strings Alternately", "thought_question": "```\ndef mergeAlternately(self, word1: str, word2: str) -> str: \"\"\" You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.Return the merged string. Note: * word1 and word2 consist of lowercase English letters. Examples: * mergeAlternately(\"abc\",\"pqr\") => \"apbqcr\" * mergeAlternately(\"ab\",\"pqrs\") => \"apbqrs\" * mergeAlternately(\"abcd\",\"pq\") => \"apbqcd\" \"\"\"\n```", "thought_answer": "```\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        m, n = len(word1), len(word2)\n        i = j = 0\n\n        ans = list()\n        while i < m or j < n:\n            if i < m:\n                ans.append(word1[i])\n                i += 1\n            if j < n:\n                ans.append(word2[j])\n                j += 1\n        \n        return \"\".join(ans)\n```"}
{"thought_name": "Greatest Common Divisor of Strings", "thought_question": "```\ndef gcdOfStrings(self, str1: str, str2: str) -> str: \"\"\" For two strings s and t, we say \"t divides s\" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2. Note: * str1 and str2 consist of English uppercase letters. Examples: * gcdOfStrings(\"ABCABC\",\"ABC\") => \"ABC\" * gcdOfStrings(\"ABABAB\",\"ABAB\") => \"AB\" * gcdOfStrings(\"LEET\",\"CODE\") => \"\" \"\"\"\n```", "thought_answer": "```\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        for i in range(min(len(str1), len(str2)), 0, -1):\n            if (len(str1) % i) == 0 and (len(str2) % i) == 0:\n                if str1[: i] * (len(str1) // i) == str1 and str1[: i] * (len(str2) // i) == str2:\n                    return str1[: i]\n        return ''\n```"}
{"thought_name": "Kids With the Greatest Number of Candies", "thought_question": "```\ndef kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]: \"\"\" There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.Note: * that multiple kids can have the greatest number of candies. Examples: * kidsWithCandies([2,3,5,1,3],3) => [true,true,true,false,true] * kidsWithCandies([4,2,1,1,2],1) => [true,false,false,false,false] * kidsWithCandies([12,1,12],10) => [true,false,true] \"\"\"\n```", "thought_answer": "```\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        maxCandies = max(candies)\n        ret = [candy + extraCandies >= maxCandies for candy in candies]\n        return ret\n```"}
{"thought_name": "Can Place Flowers", "thought_question": "```\ndef canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool: \"\"\" You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise. Note: * There are no two adjacent flowers in flowerbed. Examples: * canPlaceFlowers([1,0,0,0,1],1) => true * canPlaceFlowers([1,0,0,0,1],2) => false \"\"\"\n```", "thought_answer": "```\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        count, m, prev = 0, len(flowerbed), -1\n        for i in range(m):\n            if flowerbed[i] == 1:\n                if prev < 0:\n                    count += i // 2\n                else:\n                    count += (i - prev - 2) // 2\n                prev = i\n        \n        if prev < 0:\n            count += (m + 1) // 2\n        else:\n            count += (m - prev - 1) // 2\n        \n        return count >= n\n```"}
{"thought_name": "Reverse Vowels of a String", "thought_question": "```\ndef reverseVowels(self, s: str) -> str: \"\"\" Given a string s, reverse only all the vowels in the string and return it.The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once. Note: * s consist of printable ASCII characters. Examples: * reverseVowels(\"hello\") => \"holle\" * reverseVowels(\"leetcode\") => \"leotcede\" \"\"\"\n```", "thought_answer": "```\n    def reverseVowels(self, s: str) -> str:\n        def isVowel(ch: str) -> bool:\n            return ch in \"aeiouAEIOU\"\n        \n        n = len(s)\n        s = list(s)\n        i, j = 0, n - 1\n        while i < j:\n            while i < n and not isVowel(s[i]):\n                i += 1\n            while j > 0 and not isVowel(s[j]):\n                j -= 1\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n        \n        return \"\".join(s)\n```"}
{"thought_name": "Reverse Words in a String", "thought_question": "```\ndef reverseWords(self, s: str) -> str: \"\"\" Given an input string s, reverse the order of the words.A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.Return a string of the words in reverse order concatenated by a single space. Note: * s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces. Examples: * reverseWords(\"the sky is blue\") => \"blue is sky the\" * reverseWords(\"  hello world  \") => \"world hello\" * reverseWords(\"a good   example\") => \"example good a\" \"\"\"\n```", "thought_answer": "```\n    def reverseWords(self, s: str) -> str:\n        return \" \".join(reversed(s.split()))\n```"}
{"thought_name": "Product of Array Except Self", "thought_question": "```\ndef productExceptSelf(self, nums: List[int]) -> List[int]: \"\"\" Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.You must write an algorithm that runs in O(n) time and without using the division operation. Note: * The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. Examples: * productExceptSelf([1,2,3,4]) => [24,12,8,6] * productExceptSelf([-1,1,0,-3,3]) => [0,0,9,0,0] \"\"\"\n```", "thought_answer": "```\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        \n        # L \u548c R \u5206\u522b\u8868\u793a\u5de6\u53f3\u4e24\u4fa7\u7684\u4e58\u79ef\u5217\u8868\n        L, R, answer = [0]*length, [0]*length, [0]*length\n        \n        # L[i] \u4e3a\u7d22\u5f15 i \u5de6\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        # \u5bf9\u4e8e\u7d22\u5f15\u4e3a '0' \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u5de6\u4fa7\u6ca1\u6709\u5143\u7d20\uff0c\u6240\u4ee5 L[0] = 1\n        L[0] = 1\n        for i in range(1, length):\n            L[i] = nums[i - 1] * L[i - 1]\n        \n        # R[i] \u4e3a\u7d22\u5f15 i \u53f3\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        # \u5bf9\u4e8e\u7d22\u5f15\u4e3a 'length-1' \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u53f3\u4fa7\u6ca1\u6709\u5143\u7d20\uff0c\u6240\u4ee5 R[length-1] = 1\n        R[length - 1] = 1\n        for i in reversed(range(length - 1)):\n            R[i] = nums[i + 1] * R[i + 1]\n\n        # \u5bf9\u4e8e\u7d22\u5f15 i\uff0c\u9664 nums[i] \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u5c31\u662f\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\u4e58\u4ee5\u53f3\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        for i in range(length):\n            answer[i] = L[i] * R[i]\n        \n        return answer\n```"}
{"thought_name": "Increasing Triplet Subsequence", "thought_question": "```\ndef increasingTriplet(self, nums: List[int]) -> bool: \"\"\" Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false. Examples: * increasingTriplet([1,2,3,4,5]) => true * increasingTriplet([5,4,3,2,1]) => false * increasingTriplet([2,1,5,0,4,6]) => true \"\"\"\n```", "thought_answer": "```\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        n = len(nums)\n        if n < 3:\n            return False\n        leftMin = [0] * n\n        leftMin[0] = nums[0]\n        for i in range(1, n):\n            leftMin[i] = min(leftMin[i - 1], nums[i])\n        rightMax = [0] * n\n        rightMax[n - 1] = nums[n - 1]\n        for i in range(n - 2, -1, -1):\n            rightMax[i] = max(rightMax[i + 1], nums[i])\n        for i in range(1, n - 1):\n            if leftMin[i - 1] < nums[i] < rightMax[i + 1]:\n                return True\n        return False\n```"}
{"thought_name": "String Compression ", "thought_question": "```\ndef compress(self, chars: List[str]) -> int: \"\"\" Given an array of characters chars, compress it using the following algorithm:Begin with an empty string s. For each group of consecutive repeating characters in chars: * If the group's length is 1, append the character to s. * Otherwise, append the character followed by the group's length.\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.After you are done modifying the input array, return the new length of the array.You must write an algorithm that uses only constant extra space. Examples: * compress([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]) => 6 * compress([\"a\"]) => 1 * compress([\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]) => 4 \"\"\"\n```", "thought_answer": "```\n    def compress(self, chars: List[str]) -> int:\n        def reverse(left: int, right: int) -> None:\n            while left < right:\n                chars[left], chars[right] = chars[right], chars[left]\n                left += 1\n                right -= 1\n\n        n = len(chars)\n        write = left = 0\n        for read in range(n):\n            if read == n - 1 or chars[read] != chars[read + 1]:\n                chars[write] = chars[read]\n                write += 1\n                num = read - left + 1\n                if num > 1:\n                    anchor = write\n                    while num > 0:\n                        chars[write] = str(num % 10)\n                        write += 1\n                        num //= 10\n                    reverse(anchor, write - 1)\n                left = read + 1\n        return write\n```"}
{"thought_name": "Move Zeroes ", "thought_question": "```\ndef moveZeroes(self, nums: List[int]) -> None: \"\"\" Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.Note: * that you must do this in-place without making a copy of the array. Examples: * moveZeroes([0,1,0,3,12]) => [1,3,12,0,0] * moveZeroes([0]) => [0] \"\"\"\n```", "thought_answer": "```\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        left = right = 0\n        while right < n:\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n```"}
{"thought_name": "Is Subsequence", "thought_question": "```\ndef isSubsequence(self, s: str, t: str) -> bool: \"\"\" Given two strings s and t, return true if s is a subsequence of t, or false otherwise.A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not). Examples: * isSubsequence(\"abc\",\"ahbgdc\") => true * isSubsequence(\"axc\",\"ahbgdc\") => false \"\"\"\n```", "thought_answer": "```\n    def isSubsequence(self, s: str, t: str) -> bool:\n        n, m = len(s), len(t)\n        i = j = 0\n        while i < n and j < m:\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == n\n```"}
{"thought_name": "Container With Most Water ", "thought_question": "```\ndef maxArea(self, height: List[int]) -> int: \"\"\" You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).Find two lines that together with the x-axis form a container, such that the container contains the most water.Return the maximum amount of water a container can store. Notice * that you may not slant the container. Examples: * maxArea([1,8,6,2,5,4,8,3,7]) => 49 * maxArea([1,1]) => 1 \"\"\"\n```", "thought_answer": "```\n    def maxArea(self, height: List[int]) -> int:\n        l, r = 0, len(height) - 1\n        ans = 0\n        while l < r:\n            area = min(height[l], height[r]) * (r - l)\n            ans = max(ans, area)\n            if height[l] <= height[r]:\n                l += 1\n            else:\n                r -= 1\n        return ans\n```"}
{"thought_name": "Max Number of K-Sum Pairs ", "thought_question": "```\ndef maxOperations(self, nums: List[int], k: int) -> int: \"\"\" You are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.Return the maximum number of operations you can perform on the array. Examples: * maxOperations([1,2,3,4],5) => 2 * maxOperations([3,1,3,4,3],6) => 1 \"\"\"\n```", "thought_answer": "```\n    def maxOperations(nums: List[int], k: int) -> int:\n        res = 0\n        counts = {} # \u7edf\u8ba1\u51fa\u73b0\u4e14\u672a\u4f7f\u7528\u7684\u6570\u5b57\u4e2a\u6570\n        for num in nums:\n            # \u5982\u679cnum\u4e4b\u524d\u5b58\u5728\u53ef\u4ee5\u548c\u5b83\u914d\u5bf9\u7684\u6570\uff0c\u90a3\u4e48\u5c31\u5f97\u5230\u4e00\u4e2a\u6570\u5bf9\n            if counts.get(k - num, 0) > 0:\n                res += 1\n                counts[k - num] -= 1   # \u914d\u5bf9\u7684\u90a3\u4e2a\u6570\u76f8\u5f53\u4e8e\u88ab\u79fb\u9664\u4e86\uff0c\u4e2a\u6570-1\n            else:\n                counts[num] = counts.get(num, 0) + 1  # \u4e0d\u5b58\u5728\u914d\u5bf9\u7684\u6570\uff0c\u8fd9\u4e2a\u6570\u5f85\u5339\u914d\u4e2a\u6570\u52a01\n        return res\n```"}
{"thought_name": "Maximum Average Subarray I ", "thought_question": "```\ndef findMaxAverage(self, nums: List[int], k: int) -> float: \"\"\" You are given an integer array nums consisting of n elements, and an integer k.Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted. Examples: * findMaxAverage([1,12,-5,-6,50,3],4) => 12.75000 * findMaxAverage([5],1) => 5.00000 \"\"\"\n```", "thought_answer": "```\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        maxTotal = total = sum(nums[:k])\n        n = len(nums)\n\n        for i in range(k, n):\n            total = total - nums[i - k] + nums[i]\n            maxTotal = max(maxTotal, total)\n        \n        return maxTotal / k\n```"}
{"thought_name": "Maximum Number of Vowels in a Substring of Given Length", "thought_question": "```\ndef maxVowels(self, s: str, k: int) -> int: \"\"\" Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'. Examples: * maxVowels(\"abciiidef\",3) => 3 * maxVowels(\"aeiou\",2) => 2 * maxVowels(\"leetcode\",3) => 2 \"\"\"\n```", "thought_answer": "```\n    def maxVowels(self, s: str, k: int) -> int:\n        def isVowel(ch):\n            return int(ch in \"aeiou\")\n        \n        n = len(s)\n        vowel_count = sum(1 for i in range(k) if isVowel(s[i]))\n        ans = vowel_count\n        for i in range(k, n):\n            vowel_count += isVowel(s[i]) - isVowel(s[i - k])\n            ans = max(ans, vowel_count)\n        return ans\n```"}
{"thought_name": "Max Consecutive Ones III", "thought_question": "```\ndef longestOnes(self, nums: List[int], k: int) -> int: \"\"\" Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's. Examples: * longestOnes([1,1,1,0,0,0,1,1,1,1,0],2) => 6 * longestOnes([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1],3) => 10 \"\"\"\n```", "thought_answer": "```\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        P = [0]\n        for num in nums:\n            P.append(P[-1] + (1 - num))\n        \n        ans = 0\n        for right in range(n):\n            left = bisect.bisect_left(P, P[right + 1] - k)\n            ans = max(ans, right - left + 1)\n        \n        return ans\n```"}
{"thought_name": "Longest Subarray of 1's After Deleting One Element ", "thought_question": "```\ndef longestSubarray(self, nums: List[int]) -> int: \"\"\" Given a binary array nums, you should delete one element from it.Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray. Examples: * longestSubarray([1,1,0,1]) => 3 * longestSubarray([0,1,1,1,0,1,1,0,1]) => 5 * longestSubarray([1,1,1]) => 2 \"\"\"\n```", "thought_answer": "```\n    def longestSubarray(self, nums: List[int]) -> int:\n        ans = 0\n        p0 = p1 = 0\n        for num in nums:\n            if num == 0:\n                p1, p0 = p0, 0\n            else:\n                p0 += 1\n                p1 += 1\n            ans = max(ans, p1)\n        if ans == len(nums):\n            ans -= 1\n        return ans\n```"}
{"thought_name": "Find the Highest Altitude ", "thought_question": "```\ndef largestAltitude(self, gain: List[int]) -> int: \"\"\" There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). Return the highest altitude of a point. Examples: * largestAltitude([-5,1,5,0,-7]) => 1 * largestAltitude([-4,-3,-2,-1,4,3,2]) => 0 \"\"\"\n```", "thought_answer": "```\n    def largestAltitude(self, gain: List[int]) -> int:\n        ans = total = 0\n        for x in gain:\n            total += x\n            ans = max(ans, total)\n        return ans\n```"}
{"thought_name": "Find Pivot Index ", "thought_question": "```\ndef pivotIndex(self, nums: List[int]) -> int: \"\"\" Given an array of integers nums, calculate the pivot index of this array.The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.Return the leftmost pivot index. If no such index exists, return -1. Examples: * pivotIndex([1,7,3,6,5,6]) => 3 * pivotIndex([1,2,3]) => -1 * pivotIndex([2,1,-1]) => 0 \"\"\"\n```", "thought_answer": "```\n    def pivotIndex(self, nums: List[int]) -> int:\n        sum_left, sum_right = 0, sum(nums)\n        for i in range(len(nums)):\n            sum_right -= nums[i]\n            # \u82e5\u5de6\u4fa7\u5143\u7d20\u548c\u7b49\u4e8e\u53f3\u4fa7\u5143\u7d20\u548c\uff0c\u8fd4\u56de\u4e2d\u5fc3\u4e0b\u6807 i\n            if sum_left == sum_right:\n                return i\n            sum_left += nums[i]\n        return -1\n```"}
{"thought_name": "Find the Difference of Two Arrays ", "thought_question": "```\ndef findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]: \"\"\" Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where: * answer[0] is a list of all distinct integers in nums1 which are not present in nums2. * answer[1] is a list of all distinct integers in nums2 which are not present in nums1. Note: * the integers in the lists may be returned in any order. Examples: * findDifference([1,2,3],[2,4,6]) => [[1,3],[4,6]] * findDifference([1,2,3,3],[1,1,2,2]) => [[3],[]] \"\"\"\n```", "thought_answer": "```\n    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:\n        def search(s1: set, s2: set, idx: int):\n            for num in s1:\n                if num not in s2:\n                    answer[idx].append(num)\n\n        answer = [[], []]  \n        set1, set2 = set(nums1), set(nums2)   # \u8f6c\u4e3a\u96c6\u5408\uff0c\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u662f\u5426\u5305\u542b\u67d0\u4e2a\u5143\u7d20\n        \n        # \u679a\u4e3e\u96c6\u54081\u7684\u5143\u7d20\uff0c\u627e\u5230\u4e0d\u5728\u96c6\u54082\u7684\u5143\u7d20\n        search(set1, set2, 0)\n        # \u679a\u4e3e\u96c6\u54082\u7684\u5143\u7d20\uff0c\u627e\u5230\u4e0d\u5728\u96c6\u54081\u7684\u5143\u7d20\n        search(set2, set1, 1)\n        \n        return answer\n```"}
